nextflow.enable.dsl = 2

params {
    samplesheet = 'example_data/samplesheet.csv'
    outdir = 'results/example'
    runName = 'example_data'

    run {
        init_ortho = true
        which_ortho = true
        search = true

        broccoli = true
        orthofinder = true
        cluster_dmnd_mcl = true
        cluster_mmseqs = true
    }

    orthofinder {
        prior_run = null
        args = ""

        initial_prior_run = null
        initial_args = "-og"
    }

    broccoli {
        args = ""
    }

    search {
        gene_family_info = "${projectDir}/example_data/genefam.tsv"
        gene_family_name = "Myosin"
        hmm_dir = "${projectDir}/example_data/hmms"
    }

    cluster {
        mcl {
            inflation = 1.5
            args = ""
        }
        dmnd {
            args = "--max-target-seqs 10 --fast --quiet"
        }
        mmseqs_createdb {
            args = ""
        }
        mmseqs_cluster {
            args = ""
            prefix = "cluster"
        }
        createseqfiledb {
            args = "--min-sequences 2"
        }
    }
}

// Profiles for resource, env, container management
profiles {
    local {
        process.executor = 'local'
        singularity.enabled = true
        singularity.pullout = '1h'
        conda.enabled = true
        conda.useMamba = true
        process {
            cpus = 8
            memory = 30.GB
        }
    }
    slurm {
        singularity.enabled = true
        singularity.pullout = '1h'
        singularity.autoMounts = true
        conda.enabled = true
        conda.useMamba = true
        process {
            executor = 'slurm'

            // Default resources for all processes
            cache='lenient'
            queue='genoa64'
            clusterOptions = '--qos=vshort'
            cpus = 2
            memory = 4.GB
            time = '30m'
            
            // Specific resources
            withName: 'ORTHOFINDER|BROCCOLI|CLUSTER_DMND_MCL|MMSEQS_CLUSTER' {
                clusterOptions = '--qos=shorter'
                cpus = 4
                memory = 8.GB
                time = '1h'
            } 
        }

        executor {
            name = 'slurm'
            queueSize = 100
            submitRateLimit = '1 sec'
        }
    } 
    slurm_big {
        singularity.enabled = true
        singularity.pullout = '1h'
        singularity.autoMounts = true
        conda.enabled = true
        conda.useMamba = true
        process {
            executor = 'slurm'

            // Default resources for all processes:
            cache='lenient'
            queue='genoa64'
            clusterOptions = '--qos=normal'
            cpus = 4
            memory = 32.GB
            time = '12h'
            
            // Specific resources
            withName: 'ORTHOFINDER|BROCCOLI|CLUSTER_DMND_MCL|MMSEQS_CLUSTER' {
                clusterOptions = '--qos=vlong'
                cpus = 8
                memory = 64.GB
                time = '2d'
            }
        }

        executor {
            name = 'slurm'
            queueSize = 200
            submitRateLimit = '1 sec'
        }
    } 
    slurm_huge {
        singularity.enabled = true
        singularity.pullout = '1h'
        singularity.autoMounts = true
        conda.enabled = true
        conda.useMamba = true
        process {
            executor = 'slurm'

            // Default resources for all processes:
            cache='lenient'
            queue='genoa64'
            clusterOptions = '--qos=vlong'
            cpus = 8
            memory = 64.GB
            time = '2d'
            
            // Specific resources
            withName: 'ORTHOFINDER|BROCCOLI|CLUSTER_DMND_MCL|MMSEQS_CLUSTER' {
                clusterOptions = '--qos=marathon'
                cpus = 16
                memory = 128.GB
                time = '7d'
            }
        }

        executor {
            name = 'slurm'
            queueSize = 200
            submitRateLimit = '1 sec'
        }
    }
}

// Publishing directories
process {
    withName: 'ORTHOFINDER' {
        publishDir = [
            path: { "${params.outdir}"},
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'BROCCOLI' {
        publishDir = [
            path: { "${params.outdir}/broccoli" },
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'CLUSTER_DMND_MCL' {
        publishDir = [
            path: { "${params.outdir}/dmnd_mcl" },
            mode: 'symlink'
        ]
    }

    withName: 'PARSE_MMSEQS_TO_FASTA' {
        publishDir = [
            path: { "${params.outdir}/mmseqs"},
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'GET_ORTHOGROUP_INFO' {
        publishDir = [
            path: { "${params.outdir}/report"},
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'ORTHOFINDER_PARSE_FASTAS' {
        publishDir = [
            path: { "${params.outdir}/orthofinder"},
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'ORTHOFINDER' {
        ext.args = params.orthofinder.args
    }

    withName: 'ORTHOFINDER_INITIAL' {
        ext.args = params.orthofinder.initial_args
    }

    withName: 'MMSEQS_CLUSTER' {
        ext.prefix = params.cluster.mmseqs_cluster.prefix
        ext.args = params.cluster.mmseqs_cluster.args
    }

    withName: 'MMSEQS_CREATEDB' {
        ext.args = params.cluster.mmseqs_createdb.args
    }

    withName: 'PARSE_MMSEQS_TO_FASTA' {
        ext.createseqfiledb_args = params.cluster.createseqfiledb.args
    }

}

// Management stuff
manifest {
    name = 'crg-bcaortho'
    description = 'pipeline'
    author = 'Dean Mckeown'
    version = '1.0.0'
    nextflowVersion = '24.10.2'
    homePage = 'https://github.com/dmckeow/crg-bcaortho'
}

// Resource usage reports

workflow.onComplete = {
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
    println "Pipeline parameters:"
    params.each { k, v ->
        println "  $k: $v"
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_report.html"
    showSkipped = false
    showTaskCacheInfo = false
    showTaskResources = true
    showTaskResourcesPercentage = true
}

timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_timeline.html"
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_trace.tsv"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/${trace_timestamp}_dag.png"
}

