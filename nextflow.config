nextflow.enable.dsl = 2

profiles {
    apptainer_on {
        apptainer.enabled = true
    }
    conda_on {
        conda.enabled = true
    }
    local {
        process.executor = 'local'
        conda.enabled = true
        conda.useMamba = true
        process {
            cpus = 4
            memory = 16.GB
        }
    }
    slurm {
        conda.enabled = true
        conda.useMamba = true
        process {
            executor = 'slurm'
            
            // Default resources for all processes
            cache='lenient'
            queue='genoa64'
            clusterOptions = '--qos=normal'
            cpus = 1
            memory = 4.GB
            time = '1h'
            
            // Specific resources
            withName: 'ORTHOFINDER' {
                clusterOptions = '--qos=vlong'
                cpus = 8
                memory = 64.GB
                time = '2d'
            }

            withName: 'BROCCOLI' {
                clusterOptions = '--qos=vlong'
                cpus = 8
                memory = 64.GB
                time = '2d'
            }

            withName: 'SEARCH' {
                clusterOptions = '--qos=shorter'
                cpus = 4
                memory = 16.GB
                time = '3h'
            }

            withName: 'CLUSTER_DMND_MCL' {
                clusterOptions = '--qos=shorter'
                cpus = 4
                memory = 16.GB
                time = '3h'
            }
            
        }
    }

}

/*
 * Pipeline parameters
 */

params {
    // Parameters for all processes
    outdir              = 'results'

    // Workflow control
        // ORTHOLOGY
    run_broccoli        = true
    run_orthofinder     = true
        // SEARCH
            // If search is false, then downstream analyses will be run on all orthogroup proteins
    run_search          = true
        // CLUSTER
    run_cluster_dmnd_mcl        = true

    // Process specific paramters
        // ORTHOLOGY
    //fasta_dir           = "/users/asebe/dmckeown/projects/crg-bcaortho/data"
    fasta_dir           = "/users/asebe/dmckeown/projects/BCA_phylogeny/data/input" // full genome data
        // OrthoFinder
    prior_run           = null
    
        // Broccoli
    broccoli {
        args   = "-kmer_size 10000 -phylogenies ml"
    }

    // SEARCH
    search {
        gene_family_info   = "/users/asebe/dmckeown/projects/BCA_phylogeny/data/genefam.tsv"
        gene_family_name   = "Myosin"
        hmm_dir            = "/users/asebe/dmckeown/projects/BCA_phylogeny/data/hmms"
    }

    //gene_family_info: /users/asebe/gzolotarov/projects/2021_TFevol/metazoan_tf_evol_2022/results_phylogenies/gene_families_searchinfo.csv
  //gene_family_name: Myosin
  //hmm_dir: /users/asebe/gzolotarov/projects/2021_TFevol/metazoan_tf_evol_2022/results_phylogenies/hmms


    // CLUSTER_DMND_MCL
    cluster_dmnd_mcl {
        dmnd_params             = "--max-target-seqs 100 --more-sensitive --quiet"
        mcl_params              = ""
        mcl_inflation           = 1.5
        mcl_fasta_outdir        = "."
    }
}

// Process specific parameters
process {
    withName: 'ORTHOFINDER' {
        publishDir = [
            path: { "${params.outdir}/orthology"},
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'BROCCOLI' {
        publishDir = [
            path: { "${params.outdir}/orthology/broccoli" },
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'SEARCH' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'symlink',
            saveAs: { filename ->
                if (filename.endsWith('.domains.fasta') ||
                    filename.endsWith('.domtable')) {
                    return "${filename}"
                } else {
                    return null
                }
            }
        ]
    }

    withName: 'CLUSTER_DMND_MCL' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'symlink',
            saveAs: { filename ->
                if (filename.startsWith('clusters/dmnd_mcl/') &&
                    (filename.endsWith('.dmnd.csv') ||
                    filename.endsWith('.dmnd.csv.abc') ||
                    filename.endsWith('.mcl.fa'))) {
                    return filename
                } else {
                    return null
                }
            }
        ]
    }
}

// Module management
manifest {
    name = 'crg-bcaortho'
    description = 'pipeline'
    author = 'Dean Mckeown'
    version = '1.0.0'
    nextflowVersion = '24.10.0'
    homePage = 'https://github.com/dmckeow/crg-bcaortho'
}