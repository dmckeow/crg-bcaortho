nextflow.enable.dsl = 2

// Profiles for resource, env, container management
profiles {
    apptainer_on {
        apptainer.enabled = true
    }
    conda_on {
        conda.enabled = true
    }
    local {
        process.executor = 'local'
        conda.enabled = true
        conda.useMamba = true
        process {
            cpus = 8
            memory = 30.GB
        }
    }
    slurm {
        conda.enabled = true
        conda.useMamba = true
        process {
            executor = 'slurm'

            // Default resources for all processes
            cache='lenient'
            queue='genoa64'
            clusterOptions = '--qos=normal'
            cpus = 1
            memory = 4.GB
            time = '1h'
            
            // Specific resources
            withName: 'ORTHOFINDER' {
                clusterOptions = '--qos=vlong'
                cpus = 16
                memory = 256.GB
                time = '2d'
            }

            withName: 'BROCCOLI' {
                clusterOptions = '--qos=vlong'
                cpus = 8
                memory = 256.GB
                time = '2d'
            }

            withName: 'SEARCH' {
                clusterOptions = '--qos=shorter'
                cpus = 4
                memory = 16.GB
                time = '3h'
            }

            withName: 'CLUSTER_DMND_MCL' {
                clusterOptions = '--qos=shorter'
                cpus = 4
                memory = 16.GB
                time = '3h'
            }

            withName: 'MMSEQS_CREATEDB' {
                clusterOptions = '--qos=shorter'
                cpus = 4
                memory = 16.GB
                time = '3h'
            }

            withName: 'MMSEQS_CLUSTER' {
                clusterOptions = '--qos=shorter'
                cpus = 4
                memory = 16.GB
                time = '3h'
            }
            
        }

        executor {
            name = 'slurm'
            queueSize = 800
            submitRateLimit = '5 sec'
        }
    } 
}


/*
 * Default pipeline parameters
 */

params {
    // Whole pipeline
    outdir              = 'results/example'
    fasta_dir           = "example_data"

    // Workflow control
    run {
        // ORTHOLOGY - at least one is required!
        broccoli        = true
        orthofinder     = true
        // SEARCH
        search          = true
        // CLUSTER
        cluster_dmnd_mcl     = true
        cluster_mmseqs       = true
    }

    // Process specific parameters
        // ORTHOLOGY

        // OrthoFinder
        orthofinder {
            prior_run           = null
            min_sequences       = 2 // Min number of seqs per orthogroup
            args                = ''
        }

        // Broccoli
        broccoli {
            min_sequences       = 2 // Min number of seqs per orthogroup
            args   = ""
        }

        // SEARCH
        search {
            gene_family_info   = "${projectDir}/example_data/genefam.tsv"
            gene_family_name   = "Myosin"
            hmm_dir            = "${projectDir}/example_data/hmms"
        }

        //gene_family_info: /users/asebe/gzolotarov/projects/2021_TFevol/metazoan_tf_evol_2022/results_phylogenies/gene_families_searchinfo.csv
        //hmm_dir: /users/asebe/gzolotarov/projects/2021_TFevol/metazoan_tf_evol_2022/results_phylogenies/hmms

        // CLUSTER_DMND_MCL
        cluster {
            mcl {
                inflation       = 1.5
                fasta_outdir    = "."
                args            = ""
            }

            dmnd {
                args = "--max-target-seqs 10 --fast --quiet"
            }

            mmseqs_createdb {
                args = ""
            }

            mmseqs_cluster {
                args = ""
            }

        }
}

// Process specific parameters
process {
    withName: 'ORTHOFINDER' {
        publishDir = [
            path: { "${params.outdir}/orthology"},
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
        ext.args = params.orthofinder.args
    }

    withName: 'BROCCOLI' {
        publishDir = [
            path: { "${params.outdir}/orthology/broccoli" },
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }

    withName: 'SEARCH' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'symlink',
            saveAs: { filename ->
                if (filename.endsWith('.domains.fasta') ||
                    filename.endsWith('.domtable')) {
                    return "${filename}"
                } else {
                    return null
                }
            }
        ]
    }

    withName: 'CLUSTER_DMND_MCL' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'symlink',
            saveAs: { filename ->
                if (filename.startsWith('clusters/dmnd_mcl/') &&
                    (filename.endsWith('.dmnd.csv') ||
                    filename.endsWith('.dmnd.csv.abc') ||
                    filename.endsWith('.mcl.fa'))) {
                    return filename
                } else {
                    return null
                }
            }
        ]
    }

//    withName: 'MMSEQS_CREATEDB' {
//        publishDir = [
//            path: { "${params.outdir}/clusters/mmseqs"},
//            mode: 'symlink',
//            saveAs: { filename -> filename }
//        ]
//        ext.args = params.cluster.mmseqs_createdb.args
//    }

//    withName: 'MMSEQS_CLUSTER' {
//        publishDir = [
//            path: { "${params.outdir}/clusters/mmseqs"},
//            mode: 'symlink',
//            saveAs: { filename -> filename }
//        ]
//        ext.args = params.cluster.mmseqs_cluster.args
//    }

    withName: 'PARSE_MMSEQS_TO_FASTA' {
        publishDir = [
            path: { "${params.outdir}/clusters/mmseqs"},
            mode: 'symlink',
            saveAs: { filename -> filename }
        ]
    }
}

// Management stuff
manifest {
    name = 'crg-bcaortho'
    description = 'pipeline'
    author = 'Dean Mckeown'
    version = '1.0.0'
    nextflowVersion = '24.10.0'
    homePage = 'https://github.com/dmckeow/crg-bcaortho'
}

// Resource usage reports

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}

timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.tsv"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.png"
}